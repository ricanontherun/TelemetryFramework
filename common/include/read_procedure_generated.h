// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_READPROCEDURE_TELEMETRY_BUFFERS_H_
#define FLATBUFFERS_GENERATED_READPROCEDURE_TELEMETRY_BUFFERS_H_

#include "flatbuffers/flatbuffers.h"

namespace Telemetry {
namespace Buffers {

struct ReadProcedure;

enum RESOURCE {
  RESOURCE_FILESYSTEMS = 0,
  RESOURCE_MEMORY = 1,
  RESOURCE_MIN = RESOURCE_FILESYSTEMS,
  RESOURCE_MAX = RESOURCE_MEMORY
};

inline const char **EnumNamesRESOURCE() {
  static const char *names[] = {
    "FILESYSTEMS",
    "MEMORY",
    nullptr
  };
  return names;
}

inline const char *EnumNameRESOURCE(RESOURCE e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesRESOURCE()[index];
}

struct ReadProcedure FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_RESOURCE = 4,
    VT_THING = 6
  };
  RESOURCE Resource() const {
    return static_cast<RESOURCE>(GetField<int8_t>(VT_RESOURCE, 0));
  }
  int32_t thing() const {
    return GetField<int32_t>(VT_THING, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESOURCE) &&
           VerifyField<int32_t>(verifier, VT_THING) &&
           verifier.EndTable();
  }
};

struct ReadProcedureBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Resource(RESOURCE Resource) {
    fbb_.AddElement<int8_t>(ReadProcedure::VT_RESOURCE, static_cast<int8_t>(Resource), 0);
  }
  void add_thing(int32_t thing) {
    fbb_.AddElement<int32_t>(ReadProcedure::VT_THING, thing, 0);
  }
  ReadProcedureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ReadProcedureBuilder &operator=(const ReadProcedureBuilder &);
  flatbuffers::Offset<ReadProcedure> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<ReadProcedure>(end);
    return o;
  }
};

inline flatbuffers::Offset<ReadProcedure> CreateReadProcedure(
    flatbuffers::FlatBufferBuilder &_fbb,
    RESOURCE Resource = RESOURCE_FILESYSTEMS,
    int32_t thing = 0) {
  ReadProcedureBuilder builder_(_fbb);
  builder_.add_thing(thing);
  builder_.add_Resource(Resource);
  return builder_.Finish();
}

}  // namespace Buffers
}  // namespace Telemetry

#endif  // FLATBUFFERS_GENERATED_READPROCEDURE_TELEMETRY_BUFFERS_H_
