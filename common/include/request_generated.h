// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUEST_TELEMETRY_BUFFERS_H_
#define FLATBUFFERS_GENERATED_REQUEST_TELEMETRY_BUFFERS_H_

#include "flatbuffers/flatbuffers.h"

namespace Telemetry {
namespace Buffers {

struct Request;

enum Procedure {
  Procedure_Read = 0,
  Procedure_MIN = Procedure_Read,
  Procedure_MAX = Procedure_Read
};

inline const char **EnumNamesProcedure() {
  static const char *names[] = {
    "Read",
    nullptr
  };
  return names;
}

inline const char *EnumNameProcedure(Procedure e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesProcedure()[index];
}

struct Request FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PROCEDURE = 4
  };
  Procedure procedure() const {
    return static_cast<Procedure>(GetField<int8_t>(VT_PROCEDURE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_PROCEDURE) &&
           verifier.EndTable();
  }
};

struct RequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_procedure(Procedure procedure) {
    fbb_.AddElement<int8_t>(Request::VT_PROCEDURE, static_cast<int8_t>(procedure), 0);
  }
  RequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RequestBuilder &operator=(const RequestBuilder &);
  flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline flatbuffers::Offset<Request> CreateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    Procedure procedure = Procedure_Read) {
  RequestBuilder builder_(_fbb);
  builder_.add_procedure(procedure);
  return builder_.Finish();
}

inline const Telemetry::Buffers::Request *GetRequest(const void *buf) {
  return flatbuffers::GetRoot<Telemetry::Buffers::Request>(buf);
}

inline bool VerifyRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Telemetry::Buffers::Request>(nullptr);
}

inline void FinishRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Telemetry::Buffers::Request> root) {
  fbb.Finish(root);
}

}  // namespace Buffers
}  // namespace Telemetry

#endif  // FLATBUFFERS_GENERATED_REQUEST_TELEMETRY_BUFFERS_H_
