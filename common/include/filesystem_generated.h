// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FILESYSTEM_TELEMETRY_BUFFERS_H_
#define FLATBUFFERS_GENERATED_FILESYSTEM_TELEMETRY_BUFFERS_H_

#include "flatbuffers/flatbuffers.h"

#include "usage_generated.h"

namespace Telemetry {
namespace Buffers {

struct Filesystem;

struct Filesystem FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_LABEL = 4,
    VT_SIZE = 6,
    VT_USED = 8,
    VT_FREE = 10
  };
  const flatbuffers::String *label() const {
    return GetPointer<const flatbuffers::String *>(VT_LABEL);
  }
  const Telemetry::Buffers::Usage *size() const {
    return GetStruct<const Telemetry::Buffers::Usage *>(VT_SIZE);
  }
  const Telemetry::Buffers::Usage *used() const {
    return GetStruct<const Telemetry::Buffers::Usage *>(VT_USED);
  }
  const Telemetry::Buffers::Usage *free() const {
    return GetStruct<const Telemetry::Buffers::Usage *>(VT_FREE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_LABEL) &&
           verifier.Verify(label()) &&
           VerifyField<Telemetry::Buffers::Usage>(verifier, VT_SIZE) &&
           VerifyField<Telemetry::Buffers::Usage>(verifier, VT_USED) &&
           VerifyField<Telemetry::Buffers::Usage>(verifier, VT_FREE) &&
           verifier.EndTable();
  }
};

struct FilesystemBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_label(flatbuffers::Offset<flatbuffers::String> label) {
    fbb_.AddOffset(Filesystem::VT_LABEL, label);
  }
  void add_size(const Telemetry::Buffers::Usage *size) {
    fbb_.AddStruct(Filesystem::VT_SIZE, size);
  }
  void add_used(const Telemetry::Buffers::Usage *used) {
    fbb_.AddStruct(Filesystem::VT_USED, used);
  }
  void add_free(const Telemetry::Buffers::Usage *free) {
    fbb_.AddStruct(Filesystem::VT_FREE, free);
  }
  FilesystemBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FilesystemBuilder &operator=(const FilesystemBuilder &);
  flatbuffers::Offset<Filesystem> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<Filesystem>(end);
    return o;
  }
};

inline flatbuffers::Offset<Filesystem> CreateFilesystem(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> label = 0,
    const Telemetry::Buffers::Usage *size = 0,
    const Telemetry::Buffers::Usage *used = 0,
    const Telemetry::Buffers::Usage *free = 0) {
  FilesystemBuilder builder_(_fbb);
  builder_.add_free(free);
  builder_.add_used(used);
  builder_.add_size(size);
  builder_.add_label(label);
  return builder_.Finish();
}

inline flatbuffers::Offset<Filesystem> CreateFilesystemDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *label = nullptr,
    const Telemetry::Buffers::Usage *size = 0,
    const Telemetry::Buffers::Usage *used = 0,
    const Telemetry::Buffers::Usage *free = 0) {
  return Telemetry::Buffers::CreateFilesystem(
      _fbb,
      label ? _fbb.CreateString(label) : 0,
      size,
      used,
      free);
}

}  // namespace Buffers
}  // namespace Telemetry

#endif  // FLATBUFFERS_GENERATED_FILESYSTEM_TELEMETRY_BUFFERS_H_
